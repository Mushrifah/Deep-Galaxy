#Code doesn't work as Keras works on arrays unlike pytorh which works on tensors.
#It's here only as a reference while implementing the next file.

import torch
from efficientnet import EfficientNetB3
from torch import nn
from torch import optim
import torch.nn.functional as F
from torchvision import datasets, transforms

model = EfficientNetB3()

from collections import OrderedDict
classifier = nn.Sequential(OrderedDict([
                          ('fc1', nn.Linear(1024, 500)),
                          ('relu', nn.ReLU()),
                          ('fc2', nn.Linear(500, 2)),
                          ('output', nn.LogSoftmax(dim=1))
                          ]))
    
model.classifier = classifier

data_dir = 'C:\\Users\\win10\\Downloads\\TrainingData\\'

# TODO: Define transforms for the training data and testing data
train_transforms = transforms.Compose([transforms.RandomRotation(30),
                                       transforms.RandomResizedCrop(224),
                                       transforms.RandomHorizontalFlip(),
                                       transforms.ToTensor(),
                                       transforms.Normalize([0.485, 0.456, 0.406],
                                                            [0.229, 0.224, 0.225])])

test_transforms = transforms.Compose([transforms.Resize(255),
                                      transforms.CenterCrop(224),
                                      transforms.ToTensor(),
                                      transforms.Normalize([0.485, 0.456, 0.406],
                                                           [0.229, 0.224, 0.225])])

# Pass transforms in here, then run the next cell to see how the transforms look
eleptical_data = datasets.ImageFolder(data_dir + 'Eleptical', transform=train_transforms)
spiral_data = datasets.ImageFolder(data_dir + 'Spiral', transform=test_transforms)
test_data = datasets.ImageFolder(data_dir + 'Test', transform=train_transforms)

trainloader = [torch.utils.data.DataLoader(eleptical_data, batch_size=64, shuffle=True), torch.utils.data.DataLoader(spiral_data, batch_size=64, shuffle=True)]
testloader = torch.utils.data.DataLoader(test_data)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


criterion = nn.NLLLoss()
    # Only train the classifier parameters, feature parameters are frozen
optimizer = optim.Adam(model.classifier.parameters(), lr=0.001)

#model.to(device)
    
for labels in range(len(trainloader)):
    epochs = 1
    steps = 0
    running_loss = 0
    print_every = 5
    for epoch in range(epochs):
        for inputs in trainloader:
            steps += 1
            # Move input and label tensors to the default device
            #inputs, labels = inputs.to(device), labels.to(device)

            optimizer.zero_grad()

            logps = model(inputs)
            loss = criterion(logps, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()

            if steps % print_every == 0:
                test_loss = 0
                accuracy = 0
                model.eval()
                with torch.no_grad():
                    for inputs in testloader:
                        #inputs, labels = inputs.to(device), inputs.imgname().to(device)
                        logps = model.forward(inputs)
                        batch_loss = criterion(logps, labels)

                        test_loss += batch_loss.item()

                        # Calculate accuracy
                        ps = torch.exp(logps)
                        top_p, top_class = ps.topk(1, dim=1)
                        equals = top_class == labels.view(*top_class.shape)
                        accuracy += torch.mean(equals.type(torch.FloatTensor)).item()

                print(f"Epoch {epoch+1}/{epochs}.. "
                      f"Train loss: {running_loss/print_every:.3f}.. "
                      f"Test loss: {test_loss/len(testloader):.3f}.. "
                      f"Test accuracy: {accuracy/len(testloader):.3f}")
                running_loss = 0
                model.train()
